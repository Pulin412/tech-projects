version: "3"
services:
    db:
        image: postgres:latest
        container_name: user-db-container
        ports:
            - "5432:5432"
        environment:
            - POSTGRES_USER=admin
            - POSTGRES_PASSWORD=admin
            - POSTGRES_DB=user-db
        volumes:
            - ./db-data:/var/lib/postgresql/data
        networks:
            - curioq-network

    zookeeper:
        image: confluentinc/cp-zookeeper:6.2.1
        container_name: zookeeper-container
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        networks:
            - curioq-network

    kafka:
        image: confluentinc/cp-kafka:6.2.1
        container_name: kafka-container
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
        environment:
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-container:29092,PLAINTEXT_HOST://kafka-container:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_ZOOKEEPER_CONNECT: zookeeper-container:2181
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_DEFAULT_REPLICATION_FACTOR: 3
            KAFKA_NUM_PARTITIONS: 3
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
            KAFKA_DELETE_TOPIC_ENABLE: "true"
        volumes:
            - ./kafka-data:/var/lib/kafka/data
        networks:
            - curioq-network

    create-topic:
        image: confluentinc/cp-kafka:6.2.1
        command: >
            bash -c "kafka-topics --create --topic qa-topic --partitions 1 --replication-factor 1 --bootstrap-server kafka-container:9092 &&
            echo 'Topic created successfully!'"
        depends_on:
            - kafka
            - zookeeper
        networks:
            - curioq-network

    auth-service:
        container_name: auth-service-container
        image: auth-service-image:${IMAGE_TAG}
        build:
            context: .
            dockerfile: auth-service/Dockerfile
            args:
                - IMAGE_TAG=${IMAGE_TAG}
        ports:
            - "8080:8080"
        networks:
            - curioq-network
        depends_on:
            - db
        environment:
            - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db-container:5432/user-db
            - SPRING_DATASOURCE_USERNAME=admin
            - SPRING_DATASOURCE_PASSWORD=admin
            - SPRING_JPA_HIBERNATE_DDL_AUTO=none

    user-service:
        container_name: user-service-container
        image: user-service-image:${IMAGE_TAG}
        build:
            context: .
            dockerfile: user-service/Dockerfile
            args:
                - IMAGE_TAG=${IMAGE_TAG}
        ports:
            - "8081:8081"
        networks:
            - curioq-network
        depends_on:
            - db
        environment:
            - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db-container:5432/user-db
            - SPRING_DATASOURCE_USERNAME=admin
            - SPRING_DATASOURCE_PASSWORD=admin
            - SPRING_JPA_HIBERNATE_DDL_AUTO=none
    
    qa-service:
        container_name: qa-service-container
        image: qa-service-image:${IMAGE_TAG}
        build:
            context: .
            dockerfile: qa-service/Dockerfile
            args:
                - IMAGE_TAG=${IMAGE_TAG}
        ports:
            - "8082:8082"
        networks:
            - curioq-network
        depends_on:
            - db
            - kafka
        environment:
            - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db-container:5432/user-db
            - SPRING_DATASOURCE_USERNAME=admin
            - SPRING_DATASOURCE_PASSWORD=admin
            - SPRING_JPA_HIBERNATE_DDL_AUTO=none

networks:
    curioq-network: